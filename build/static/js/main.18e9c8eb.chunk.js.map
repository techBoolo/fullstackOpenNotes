{"version":3,"sources":["services/note.js","components/Note/index.js","App.js","index.js"],"names":["baseUrl","getAll","a","axios","get","data","create","newNote","post","update","id","updateNote","put","remove","delete","response","statusText","Note","note","updateImportance","removeNote","useState","important","setImportant","handleChecked","ev","target","checked","style","display","gridTemplateColumns","justifyContent","alignItems","borderBottom","padding","content","type","onChange","onClick","justifySelf","App","notes","setNotes","setNote","showAll","setShowAll","filteredNotes","setFilteredNotes","handleSubmit","preventDefault","trim","date","Date","toISOString","notesService","importance","find","updatedNote","map","filter","useEffect","getNotes","onSubmit","value","marginRight","htmlFor","marginLeft","width","name","margin","textAlign","listStyle","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.18e9c8eb.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/notes'\n\nconst getAll = async () => {\n  const { data } = await axios.get(`${baseUrl}`)\n  return data\n}\n\nconst create = async (newNote) => {\n  const { data } = await axios.post(`${baseUrl}`, newNote)\n  return data\n}\n\nconst update = async (id, updateNote) => {\n  const { data } = await axios.put(`${baseUrl}/${id}`, updateNote)\n  return data\n}\n\nconst remove = async (id) => {\n  const response = await axios.delete(`${baseUrl}/${id}`)\n  return response.statusText\n}\n\nexport default {\n  getAll,\n  create,\n  update,\n  remove\n}\n","import { useState } from 'react'\n\nconst Note = ({ note, updateImportance, removeNote }) => {\n  const [ important, setImportant ] = useState(note.important)\n\n  const handleChecked = async (ev) => {\n    setImportant(ev.target.checked)\n    updateImportance(note.id, ev.target.checked)\n  }\n  return (\n    <li \n      style={{ \n        display: 'grid',  \n        gridTemplateColumns: '2fr 1fr 1fr', \n        justifyContent: 'center', \n        alignItems: 'center',\n        borderBottom: 'dashed 1px #333',\n        padding: '10px'\n      }}\n    >\n      <span>{note.content}</span>\n      <input \n        type='checkbox' \n        checked={important} \n        onChange={handleChecked}\n      />\n      <button onClick={() => removeNote(note.id)} style={{ justifySelf: 'center' }}>del</button>\n    </li>\n  )\n}\n\nexport default Note\n","import { useState, useEffect } from 'react'\nimport notesService from './services/note.js'\nimport Note from './components/Note/'\n\nconst App = () => {\n  const [ notes, setNotes ] = useState([])\n  const [ note, setNote ] = useState('')\n  const [ important, setImportant ] = useState(false)\n  const [ showAll, setShowAll ] = useState(true)\n  const [ filteredNotes, setFilteredNotes ] = useState(notes)\n\n  const handleSubmit = async (ev) => {\n    ev.preventDefault()\n    if(note.trim()) {\n      let newNote = {\n        content: note,\n        date: new Date().toISOString(),\n        important \n      }\n      newNote = await notesService.create(newNote)\n      setNotes([...notes, newNote])\n      setNote('')\n      setImportant(false)\n    } else {\n      return  null\n    }\n  }\n\n  const updateImportance = async (id, importance) => {\n    const note = notes.find(note => note.id === id)\n    const updateNote = {\n      ...note,\n      important: importance\n    }\n    const updatedNote = await notesService.update(id, updateNote)\n    setNotes(notes.map(note => note.id === id ? updatedNote : note))\n  }\n\n  const removeNote = async (id) => {\n    const response = await notesService.remove(id)\n    if(response === 'OK') {\n      setNotes(notes.filter(note => note.id !== id ))\n    }\n  }\n\n  const handleShowAll = (ev) => {\n    setShowAll(ev.target.checked)  \n  }\n\n  useEffect(() => {\n    const getNotes = async () => {\n      const notes = await notesService.getAll()\n      setNotes(notes)\n    }\n    getNotes()\n  }, [])\n\n  useEffect(() => {\n    setFilteredNotes( showAll ? notes : notes.filter(note => note.important === false))\n  }, [showAll, notes])\n\n  return (\n    <div>\n      <h4>New Note</h4>\n      <form onSubmit={handleSubmit}>\n        <input value={note} onChange={(ev) => setNote(ev.target.value)} style={{ padding: '5px', marginRight: '10px'}}/>\n        <input type='checkbox' id='important' checked={important} onChange={(ev) => setImportant(ev.target.checked)}/>\n        <label htmlFor='important'>important</label>\n        <button type='submit' style={{ marginLeft: '10px', padding: '5px', width: '60px'}}>add</button>\n      </form>\n      <h4>List of Notes</h4>\n      <div>\n        <input \n          type='checkbox' \n          id='showall' \n          name='showall' \n          checked={showAll} \n          onChange={handleShowAll} \n        />\n        <label htmlFor='showall'>Show All</label>\n      </div>\n      <div style={{ margin: '30px'}}>\n      <div style={{ display: 'grid', gridTemplateColumns: '2fr 1fr 1fr', textAlign: 'center', borderBottom: '1px solid'}}>\n        <h4>Content</h4>\n        <p>important</p>\n        <p>action</p>\n      </div>\n      <ul style={{ listStyle: 'none', padding: '0px 0' }}>\n        {\n          filteredNotes.map(note  => (\n            <Note \n              key={note.id} \n              note={note} \n              updateImportance={updateImportance} \n              removeNote={removeNote}\n            />\n          ))\n        }\n      </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}